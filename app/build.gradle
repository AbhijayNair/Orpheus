/*
 * Copyright (C) 2014 OpenSilk Productions LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.application'
apply plugin: 'hugo'
apply plugin: 'robolectric'

// Versioning
def versionMajor = 2
def versionMinor = 0
def versionPatch = 4
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

assert(versionMinor < 100) // Double digits
assert(versionPatch < 100) // Double digits
assert(versionBuild < 100) // Double digits

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "org.opensilk.music"
        minSdkVersion 15
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName String.format("%d.%d.%d", versionMajor, versionMinor, versionPatch)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['../src']
            resources.srcDirs = ['../src']
            aidl.srcDirs = ['../src']
            renderscript.srcDirs = ['../src']
            res.srcDirs = ['../res','../res-new-themes','../res-new','../res-common']
            assets.srcDirs = ['../assets']
        }
        debug {
            res.srcDirs = ['variants/debug/res']
        }
        release {
            res.srcDirs = ['variants/release/res']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "${gitSha()}".isEmpty() ? "-SNAPSHOT" : "-SNAPSHOT-${gitSha()}"
            buildConfigField "String", "MUSIC_AUTHORITY", "\"org.opensilk.music.debug.provider\""
            buildConfigField "String", "ARTWORK_AUTHORITY", "\"org.opensilk.music.debug.artwork.provider\""
        }
        release {
            buildConfigField "String", "MUSIC_AUTHORITY", "\"org.opensilk.music.provider\""
            buildConfigField "String", "ARTWORK_AUTHORITY", "\"org.opensilk.music.artwork.provider\""
        }
    }

    if (file('../../KeyStore').exists()) {
        signingConfigs {
            release {
                def Properties keyProps = new Properties()
                keyProps.load(new FileInputStream(file('../../KeyStore/release2.properties')))
                storeFile file(keyProps["store"])
                keyAlias keyProps["alias"]
                storePassword keyProps["storePass"]
                keyPassword keyProps["pass"]
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
        signingConfigs {
            debug {
                def Properties keyProps = new Properties()
                keyProps.load(new FileInputStream(file('../../KeyStore/debug2.properties')))
                storeFile file(keyProps["store"])
                keyAlias keyProps["alias"]
                storePassword keyProps["storePass"]
                keyPassword keyProps["pass"]
            }
        }
        buildTypes.debug.signingConfig signingConfigs.debug
        def Properties otherProps = new Properties();
        otherProps.load(new FileInputStream(file('../../KeyStore/orpheus.properties')))
        defaultConfig.buildConfigField "String", "LASTFM_KEY", otherProps.lastfmKey
        buildTypes.debug.resValue "string", "cast_id", otherProps.castDebugKey
        buildTypes.release.resValue "string", "cast_id", otherProps.castKey
        buildTypes.debug.buildConfigField "String", "SPLUNK_MINT_KEY", otherProps.splunkMintDebugKey
        buildTypes.release.buildConfigField "String", "SPLUNK_MINT_KEY", otherProps.splunkMintKey
    } else {
        println "No KeyStore directory found! (You can ignore this warning if your name is not drew)"
        defaultConfig.buildConfigField "String", "LASTFM_KEY", "null"
        defaultConfig.resValue "string", "cast_id", "CC1AD845" //CastMediaControlIntent.DEFAULT_MEDIA_RECEIVER_APPLICATION_ID
        defaultConfig.buildConfigField "String", "SPLUNK_MINT_KEY", "null"
    }

}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

robolectric {
    include '**/*Test.class'
}
// hack for robolectric
// https://github.com/JakeWharton/gradle-android-test-plugin/issues/54
tasks.whenTaskAdded { task ->
    if (task.name == 'testDebug') {
        task.jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
        // use afterTest to listen to the test execution results
        afterTest { descriptor, result ->
            println "Executing test for {$descriptor.name} with result: ${result.resultType}"
        }
    }
}

dependencies {
    //SDK
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:cardview-v7:21.0.3'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.android.support:palette-v7:21.0.3'
    compile 'com.android.support:mediarouter-v7:21.0.3'
    compile 'com.google.android.gms:play-services-cast:6.5.87'
    //jake wharton
    compile 'com.jakewharton:disklrucache:2.0.2'
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.jakewharton.timber:timber:2.5.0'
    //gabriele mariotti
    compile 'com.github.gabrielemariotti.changeloglib:library:1.4.0'
    //roman nurik
    compile 'com.google.android.apps.muzei:muzei-api:1.0'
    //square
    compile 'com.squareup.mortar:mortar:0.16'
    compile 'com.squareup.flow:flow:0.8'
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    //rx
    compile 'io.reactivex:rxandroid:0.22.0'
    //apache
    compile 'commons-io:commons-io:2.4'
    //google
    compile 'com.google.code.gson:gson:2.3'
    //greenrobot
    compile 'de.greenrobot:eventbus:2.4.0'

    //local m2
    compile 'com.mobeta.android.dslv:library:0.6.1-SNAPSHOT@aar'
    compile 'com.android.volley:volley:1.0-SNAPSHOT@aar'
    compile 'com.triggertrap:seekarc:1.0-SNAPSHOT@aar'
    compile 'com.github.amlcurran:showcaseview:5.1.0-SNAPSHOT@aar'

    compile 'org.opensilk:silkcastservice:0.2.3-SNAPSHOT@aar'
    compile 'org.opensilk.music.plugin:folders:0.2.0-SNAPSHOT@aar'

//    compile project(':../OrpheusPlugins:folders')
//    compile project(':../SilkCastService:library')
//    compile project(':../SilkFileBrowser:lib_sfb')

    compile "com.splunk.mint:mint:4.0.6"

    compile project(':api')

//    compile fileTree(dir: '../libs', include: ['*.jar'])

    androidTestCompile('junit:junit:4.11')
    androidTestCompile('org.robolectric:robolectric:2.4') {
//        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
//        exclude module: 'maven-artifact'
//        exclude module: 'maven-artifact-manager'
//        exclude module: 'maven-error-diagnostics'
//        exclude module: 'maven-model'
//        exclude module: 'maven-project'
//        exclude module: 'maven-settings'
//        exclude module: 'plexus-container-default'
//        exclude module: 'plexus-interpolation'
//        exclude module: 'plexus-utils'
//        exclude module: 'wagon-file'
//        exclude module: 'wagon-http-lightweight'
//        exclude module: 'wagon-provider-api'
    }
    androidTestCompile('com.squareup:fest-android:1.0.0')
    androidTestCompile('org.mockito:mockito-core:1.10.0')
//    androidTestCompile 'com.squareup.assertj:assertj-android:1.0.0@aar'
//    androidTestCompile 'com.squareup.assertj:assertj-android-support-v4:1.0.0'
//    androidTestCompile 'com.squareup.assertj:assertj-android-appcompat-v7:1.0.0'

}